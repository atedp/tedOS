{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"bit_field","disambiguator":[8000045587485132784,4838701955333476313]},"crate_root":"/home/ted/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.9.0/src","external_crates":[{"file_name":"/home/ted/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.9.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[5903923751799495604,8601662529811271953]}},{"file_name":"/home/ted/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.9.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[11854383476639491665,9193229366557577764]}}],"span":{"file_name":[47,104,111,109,101,47,116,101,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,95,102,105,101,108,100,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":10736,"line_start":1,"line_end":323,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,116,101,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,95,102,105,101,108,100,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":10736,"line_start":1,"line_end":323,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/ted/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.9.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":22},{"krate":0,"index":34},{"krate":0,"index":48},{"krate":0,"index":60},{"krate":0,"index":72},{"krate":0,"index":84},{"krate":0,"index":96},{"krate":0,"index":108},{"krate":0,"index":120},{"krate":0,"index":132},{"krate":0,"index":144},{"krate":0,"index":156},{"krate":0,"index":36}],"decl_id":null,"docs":" Provides the abstraction of a bit field, which allows for bit-level update and retrieval\n operations.\n","sig":null,"attributes":[{"value":"no_std","span":{"file_name":[47,104,111,109,101,47,116,101,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,95,102,105,101,108,100,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":110,"byte_end":120,"line_start":4,"line_end":4,"column_start":1,"column_end":11}}]},{"kind":"Trait","id":{"krate":0,"index":10},"span":{"file_name":[47,104,111,109,101,47,116,101,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,95,102,105,101,108,100,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":287,"byte_end":295,"line_start":13,"line_end":13,"column_start":11,"column_end":19},"name":"BitField","qualname":"::BitField","value":"BitField","parent":null,"children":[{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20}],"decl_id":null,"docs":" A generic trait which provides methods for extracting and setting specific bits or ranges of\n bits.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":12},"span":{"file_name":[47,104,111,109,101,47,116,101,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,95,102,105,101,108,100,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":535,"byte_end":545,"line_start":23,"line_end":23,"column_start":8,"column_end":18},"name":"bit_length","qualname":"::BitField::bit_length","value":"fn () -> usize","parent":{"krate":0,"index":10},"children":[],"decl_id":null,"docs":" Returns the length, eg number of bits, in this bit field.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":14},"span":{"file_name":[47,104,111,109,101,47,116,101,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,95,102,105,101,108,100,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1048,"byte_end":1055,"line_start":40,"line_end":40,"column_start":8,"column_end":15},"name":"get_bit","qualname":"::BitField::get_bit","value":"fn (&self, bit: usize) -> bool","parent":{"krate":0,"index":10},"children":[],"decl_id":null,"docs":" Obtains the bit at the index `bit`; note that index 0 is the least significant bit, while\n index `length() - 1` is the most significant bit.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":16},"span":{"file_name":[47,104,111,109,101,47,116,101,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,95,102,105,101,108,100,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1629,"byte_end":1637,"line_start":58,"line_end":58,"column_start":8,"column_end":16},"name":"get_bits","qualname":"::BitField::get_bits","value":"fn (&self, range: Range<usize>) -> Self","parent":{"krate":0,"index":10},"children":[],"decl_id":null,"docs":" Obtains the range of bits specified by `range`; note that index 0 is the least significant\n bit, while index `length() - 1` is the most significant bit.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":[47,104,111,109,101,47,116,101,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,95,102,105,101,108,100,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2379,"byte_end":2386,"line_start":82,"line_end":82,"column_start":8,"column_end":15},"name":"set_bit","qualname":"::BitField::set_bit","value":"fn (&mut self, bit: usize, value: bool) -> &mut Self","parent":{"krate":0,"index":10},"children":[],"decl_id":null,"docs":" Sets the bit at the index `bit` to the value `value` (where true means a value of '1' and\n false means a value of '0'); note that index 0 is the least significant bit, while index\n `length() - 1` is the most significant bit.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":[47,104,111,109,101,47,116,101,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,95,102,105,101,108,100,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3158,"byte_end":3166,"line_start":104,"line_end":104,"column_start":8,"column_end":16},"name":"set_bits","qualname":"::BitField::set_bits","value":"fn (&mut self, range: Range<usize>, value: Self) -> &mut Self","parent":{"krate":0,"index":10},"children":[],"decl_id":null,"docs":" Sets the range of bits defined by the range `range` to the lower bits of `value`; to be\n specific, if the range is N bits long, the N lower bits of `value` will be used; if any of\n the other bits in `value` are set to 1, this function will panic.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":22},"span":{"file_name":[47,104,111,109,101,47,116,101,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,95,102,105,101,108,100,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3240,"byte_end":3248,"line_start":108,"line_end":108,"column_start":11,"column_end":19},"name":"BitArray","qualname":"::BitArray","value":"BitArray<T: BitField>","parent":null,"children":[{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":30},{"krate":0,"index":32}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":[47,104,111,109,101,47,116,101,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,95,102,105,101,108,100,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3519,"byte_end":3529,"line_start":117,"line_end":117,"column_start":8,"column_end":18},"name":"bit_length","qualname":"::BitArray::bit_length","value":"fn (&self) -> usize","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" Returns the length, eg number of bits, in this bit array.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":[47,104,111,109,101,47,116,101,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,95,102,105,101,108,100,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4044,"byte_end":4051,"line_start":134,"line_end":134,"column_start":8,"column_end":15},"name":"get_bit","qualname":"::BitArray::get_bit","value":"fn (&self, bit: usize) -> bool","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" Obtains the bit at the index `bit`; note that index 0 is the least significant bit, while\n index `length() - 1` is the most significant bit.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":[47,104,111,109,101,47,116,101,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,95,102,105,101,108,100,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4693,"byte_end":4701,"line_start":152,"line_end":152,"column_start":8,"column_end":16},"name":"get_bits","qualname":"::BitArray::get_bits","value":"fn (&self, range: Range<usize>) -> T","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" Obtains the range of bits specified by `range`; note that index 0 is the least significant\n bit, while index `length() - 1` is the most significant bit.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":[47,104,111,109,101,47,116,101,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,95,102,105,101,108,100,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5448,"byte_end":5455,"line_start":176,"line_end":176,"column_start":8,"column_end":15},"name":"set_bit","qualname":"::BitArray::set_bit","value":"fn (&mut self, bit: usize, value: bool) -> ()","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" Sets the bit at the index `bit` to the value `value` (where true means a value of '1' and\n false means a value of '0'); note that index 0 is the least significant bit, while index\n `length() - 1` is the most significant bit.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":[47,104,111,109,101,47,116,101,100,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,95,102,105,101,108,100,45,48,46,57,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6301,"byte_end":6309,"line_start":199,"line_end":199,"column_start":8,"column_end":16},"name":"set_bits","qualname":"::BitArray::set_bits","value":"fn (&mut self, range: Range<usize>, value: T) -> ()","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" Sets the range of bits defined by the range `range` to the lower bits of `value`; to be\n specific, if the range is N bits long, the N lower bits of `value` will be used; if any of\n the other bits in `value` are set to 1, this function will panic.","sig":null,"attributes":[]}],"impls":[],"refs":[],"macro_refs":[],"relations":[]}